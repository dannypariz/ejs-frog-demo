name: "JFrog Integration Example"

on:
  workflow_dispatch:

jobs:
  build-and-publish:
    runs-on: ubuntu-latest

    env:
      IMAGE_NAME: vuln-ejs
      IMAGE_TAG: ${{ github.run_number }}
      DOCKER_REGISTRY: ${{ vars.JF_URL }}/danny-docker-virtual

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Setup JFrog CLI
        uses: jfrog/setup-jfrog-cli@v4
        env:
          JF_URL: ${{ vars.JF_URL }}
          JF_ACCESS_TOKEN: ${{ secrets.JF_ACCESS_TOKEN }}

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20'

      - name: Configure npm for Artifactory
        run: |
          jf npm-config --global=true \
            --repo-resolve=tutorial-npm \
            --repo-deploy=tutorial-npm

      - name: Install npm Dependencies
        run: jf npm install

      - name: Publish npm Package to Artifactory
        run: jf npm publish

      - name: Docker Login to Artifactory
        run: |
          echo "${{ secrets.JF_ACCESS_TOKEN }}" | docker login ${{ vars.JF_URL }} -u jfrog --password-stdin

      - name: Build Docker Image
        run: |
          docker build \
            --build-arg JF_TOKEN=${{ secrets.JF_ACCESS_TOKEN }} \
            -t ${{ env.DOCKER_REGISTRY }}/${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }} .

      - name: Push Docker Image to Artifactory
        run: |
          docker push ${{ env.DOCKER_REGISTRY }}/${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }}

      - name: Collect and Publish Build Info
        run: |
          jf rt build-collect-env
          jf rt build-add-git
          jf rt build-publish

      - name: Scan Build with Xray
        run: jf bs --vuln --fail=false
